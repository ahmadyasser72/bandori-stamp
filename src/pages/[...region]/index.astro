---
import type { GetStaticPaths } from "astro";
import { getCollection } from "astro:content";
import * as devalue from "devalue";

import { REGIONS } from "~/constants";
import DefaultLayout from "~/layouts/default-layout.astro";

export const getStaticPaths = (() => [
  { params: { region: undefined } },
  ...REGIONS.map((region) => ({ params: { region } })),
]) satisfies GetStaticPaths;

const { region } = Astro.params;

const title =
  region === undefined
    ? "Bandori Stamp"
    : `Bandori Stamp (${region.toUpperCase()})`;

const stamps = (
  await getCollection(
    "stamps",
    ({ data }) => region === undefined || data.region === region
  )
).map(({ data }) => data);
---

<DefaultLayout {title}>
  <div
    class="absolute !top-1/2 !left-1/2 flex !-translate-x-1/2 !-translate-y-1/2 flex-col gap-4"
  >
    <button id="show-random-stamp" class="btn btn-accent">Show Random</button>
    <button id="show-random-voiced-stamp" class="btn btn-accent"
      >Show Random Voiced</button
    >
  </div>

  <div
    id="stamp-overlay"
    class="pointer-events-none absolute inset-0"
    data-stamps={devalue.stringify(stamps)}
  >
  </div>
</DefaultLayout>

<script>
  import * as devalue from "devalue";

  import type { Stamp } from "~/content.config";
  import { getRandomItem, loadStamp, type LoadedStamp } from "~/utilities";

  const stampOverlay = document.getElementById("stamp-overlay") as HTMLElement;

  const allStamps = devalue.parse(stampOverlay.dataset.stamps!) as Stamp[];
  const voicedStamps = allStamps.filter((it) => it.voiced);

  const playStamp = async (voiced: boolean) => {
    const randomStamp = getRandomItem(voiced ? voicedStamps : allStamps);
    const stamp = await loadStamp(randomStamp);

    stampOverlay.appendChild(new BandoriStamp(stamp));
  };

  document
    .getElementById("show-random-stamp")
    ?.addEventListener("click", () => playStamp(false));
  document
    .getElementById("show-random-voiced-stamp")
    ?.addEventListener("click", () => playStamp(true));

  class BandoriStamp extends HTMLElement {
    stamp: LoadedStamp;

    constructor(stamp: LoadedStamp) {
      super();

      this.stamp = stamp;

      this.className = "absolute transform-origin-top-left";
      const [randomX, randomY] = [Math.random() * 100, Math.random() * 100];
      this.style.left = randomX + "%";
      this.style.top = randomY + "%";
      this.style.transform = `translate(${randomX * -1}%, ${randomY * -1}%)`;
    }

    connectedCallback() {
      this.appendChild(this.stamp.image);
      if (this.stamp.audio !== undefined) {
        this.stamp.audio.play();
      }

      // self remove after 5s
      setTimeout(() => {
        // start hide animation
        this.stamp.image.classList.add("hide");
        // then self remove after animation is done
        this.stamp.image.addEventListener(
          "animationend",
          () => stampOverlay.removeChild(this),
          { once: true }
        );
      }, 5000);
    }
  }

  customElements.define("bandori-stamp", BandoriStamp);
</script>

<style is:global>
  @keyframes bounceIn {
    0% {
      transform: scale(0.3);
      opacity: 0;
    }
    20% {
      transform: scale(1.05);
      opacity: 1;
    }
    40% {
      transform: scale(0.9);
    }
    60% {
      transform: scale(1.03);
    }
    80% {
      transform: scale(0.97);
    }
    100% {
      transform: scale(1);
      opacity: 1;
    }
  }

  @keyframes bounceOut {
    0% {
      transform: scale(1);
      opacity: 1;
    }
    20% {
      transform: scale(0.9);
    }
    50% {
      transform: scale(1.05);
      opacity: 1;
    }
    100% {
      transform: scale(0.3);
      opacity: 0;
    }
  }

  bandori-stamp,
  bandori-stamp > img {
    height: 165px;
    width: 200px;
  }

  bandori-stamp > img {
    animation: bounceIn 0.75s forwards;

    &.hide {
      animation: bounceOut 0.75s forwards;
    }
  }
</style>
