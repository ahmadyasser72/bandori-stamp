---
import type { GetStaticPaths } from "astro";
import { getCollection } from "astro:content";
import { base } from "astro:config/server";
import * as devalue from "devalue";

import Navbar from "~/components/navbar.astro";
import { REGIONS } from "~/constants";
import "~/styles/global.css";

export const getStaticPaths = (() => [
  { params: { region: undefined } },
  ...REGIONS.map((region) => ({ params: { region } })),
]) satisfies GetStaticPaths;

const { region } = Astro.params;

const title =
  region === undefined
    ? "Bandori Stamp"
    : `Bandori Stamp (${region.toUpperCase()})`;

const stamps = (
  await getCollection(
    "stamps",
    ({ data }) => region === undefined || data.region === region
  )
).map(({ data }) => data);
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href={`${base}/favicon.svg`} />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body>
    <div class="flex min-h-screen flex-col items-center">
      <Navbar {title} />

      <main class="relative container flex-1 px-2 py-8">
        <div
          class="absolute !top-1/2 !left-1/2 flex !-translate-x-1/2 !-translate-y-1/2 flex-col gap-4"
        >
          <button id="show-random-stamp" class="btn">Show Random</button>
          <button id="show-random-voiced-stamp" class="btn"
            >Show Random Voiced</button
          >
        </div>

        <div
          id="stamp-overlay"
          class="pointer-events-none absolute inset-0"
          data-stamps={devalue.stringify(stamps)}
        >
        </div>
      </main>

      <footer
        class="bg-base-100 w-full border-t px-4 py-2 text-center sm:text-end"
      >
        Icons by <a
          class="link"
          href="https://lucide.dev"
          target="_blank"
          rel="noopener noreferrer">Lucide</a
        > (ISC) &
        <a
          class="link"
          href="https://twemoji.twitter.com/"
          target="_blank"
          rel="noopener noreferrer">Twemoji</a
        > (CC BY 4.0)
      </footer>
    </div>
  </body>
</html>

<script>
  import * as devalue from "devalue";
  import { base } from "astro:config/client";
  import type { Stamp } from "~/content.config";
  import { getRandomItem } from "~/utilities";

  const stampOverlay = document.getElementById("stamp-overlay") as HTMLElement;
  const stamps = devalue.parse(stampOverlay.dataset.stamps!) as Stamp[];
  const voicedStamps = stamps.filter((it) => it.voiced);
  const playStamp = (voiced: boolean) => {
    const stamp = getRandomItem(voiced ? voicedStamps : stamps);
    stampOverlay.appendChild(new BandoriStamp({ ...stamp, voiced }));
  };

  document
    .getElementById("show-random-stamp")
    ?.addEventListener("click", () => playStamp(false));
  document
    .getElementById("show-random-voiced-stamp")
    ?.addEventListener("click", () => playStamp(true));

  class BandoriStamp extends HTMLElement {
    stamp: Stamp;

    constructor(stamp: Stamp) {
      super();

      this.stamp = stamp;

      this.className = "absolute transform-origin-top-left";
      const [randomX, randomY] = [Math.random() * 100, Math.random() * 100];
      this.style.left = randomX + "%";
      this.style.top = randomY + "%";
      this.style.transform = `translate(${randomX * -1}%, ${randomY * -1}%)`;
    }

    connectedCallback() {
      const { stampId, region, voiced } = this.stamp;
      const basePath = `${base}/static/${region}.${stampId}/stamp`;

      const img = new Image();
      img.src = basePath + ".png";
      const audio = voiced ? new Audio(basePath + ".mp3") : undefined;

      const cleanup = (passed: number = 0) => {
        // wait at most 5s before removing the stamp
        const remaining = 5000 - passed;
        setTimeout(
          () => {
            // self remove after animation is done
            img.addEventListener(
              "animationend",
              () => this.parentNode!.removeChild(this),
              { once: true }
            );
            img.classList.add("hide");
          },
          // ensure the stamp is displayed for at least 1s
          // in case the 5s windows have already passed
          Math.max(remaining, 1000)
        );
      };

      if (audio !== undefined) {
        // if its voiced, wait until the audio is loaded before displaying the stamp
        const displayImageAndPlayAudio = () => {
          this.appendChild(img);

          audio.play();
          const started = Date.now();
          audio.addEventListener("ended", () => cleanup(Date.now() - started));
        };

        audio.addEventListener(
          "canplaythrough",
          () => {
            if (img.complete) displayImageAndPlayAudio();
            else
              img.addEventListener("load", displayImageAndPlayAudio, {
                once: true,
              });
          },
          { once: true }
        );
      } else {
        // otherwise, display the stammp immediately
        const displayImage = () => {
          this.appendChild(img);
          cleanup();
        };

        if (img.complete) displayImage();
        else img.addEventListener("load", displayImage, { once: true });
      }
    }
  }

  customElements.define("bandori-stamp", BandoriStamp);
</script>

<style is:global>
  @keyframes bounceIn {
    0% {
      transform: scale(0.3);
      opacity: 0;
    }
    20% {
      transform: scale(1.05);
      opacity: 1;
    }
    40% {
      transform: scale(0.9);
    }
    60% {
      transform: scale(1.03);
    }
    80% {
      transform: scale(0.97);
    }
    100% {
      transform: scale(1);
      opacity: 1;
    }
  }

  @keyframes bounceOut {
    0% {
      transform: scale(1);
      opacity: 1;
    }
    20% {
      transform: scale(0.9);
    }
    50% {
      transform: scale(1.05);
      opacity: 1;
    }
    100% {
      transform: scale(0.3);
      opacity: 0;
    }
  }

  bandori-stamp,
  bandori-stamp > img {
    height: 165px;
    width: 200px;
  }

  bandori-stamp > img {
    animation: bounceIn 0.75s forwards;

    &.hide {
      animation: bounceOut 0.75s forwards;
    }
  }
</style>
